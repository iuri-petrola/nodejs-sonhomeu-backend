// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


// Execute estes comandos após modificar o schema:
// npx prisma generate                                                            # Regenera o client
// npx prisma migrate dev --skip-generate --create-only --name add_cart_model     # Cria a migração
// npx prisma migrate deploy                                                      # aplicar migraçao
// npx prisma migrate dev --name remove-user-open-unique
// npx prisma migrate dev --name add-cart-finish
// npx prisma migrate dev --name add-user-whatsapp

// npx prisma db push                                                             # Forçar atualização do schema sem migrar

// OU SOMENTE ABAIXO
// criar uma migration: yarn prisma migrate dev

model User {
  id String @id @default(uuid())
  name String
  email String
  password String
  whatsapp String
  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())

  @@map("users")

  carts Cart[] // Relação inversa
}

model Category{
  id String @id @default(uuid())
  name String
  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())

  @@map("categories")
  products Product[]
}

model Product{
  id String @id @default(uuid())
  name String
  price String
  description String
  banner String
  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())

  category Category @relation(fields: [category_id], references: [id])

  @@map("products")
  category_id String
  items Item[]
  cartItems CartItem[] // Relação inversa
}

model Order{
  id String @id @default(uuid())
  table Int
  status Boolean @default(false)
  draft Boolean @default(true)
  name String?

  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())

  @@map("orders")
  items Item[]
}

model Item{
  id String @id @default(uuid())
  amount Int

  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())

  order Order @relation(fields: [order_id], references: [id])
  product Product @relation(fields: [product_id], references: [id])

  @@map("items")
  order_id String
  product_id String

}

model Cart {
  id        String    @id @default(uuid())
  userId    String    
  user      User      @relation(fields: [userId], references: [id])
  items     CartItem[]
  open      Boolean   @default(true)
  finish    Boolean   @default(false)
  createdAt DateTime  @default(now())

  @@index([userId])

  // Adicione um índice composto único
  // @@unique([userId, open], name: "userId_open")
}

model CartItem {
  id        String  @id @default(uuid())
  cartId    String
  cart      Cart    @relation(fields: [cartId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int     @default(1)
}